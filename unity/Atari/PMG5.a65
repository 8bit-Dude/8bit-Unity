// 5th sprite flicker routine
// Author: Anthony Beaucamp
// Date created: 2017/12/21
// Compile with MADS

	org $8f0b

PM5BAS  = $9b00
M1POS 	= $d004
M2POS 	= $d005
M3POS 	= $d006
M4POS 	= $d007

; 5th sprite flicker
PMGX	.ds 4
PMGY	.ds 4
PMGF	.ds 8
PM5MAX	.ds 1
PM5IND	.ds 1
PM5AIN	.ds 2
PM5AOU	.ds 2
GFXTOG	.ds 1	; Toggle for 5th sprite index incrementor

/*-------------------------------------------------------------------------------------------------*/

initPM5:
	; Init 5th sprite
	mva #0 PM5IND
	rts

updtPM5:	
	; Check that sprites are enabled!
	sta GFXTOG
	lda PM5MAX
	bne sprbranch0
	rts

sprbranch0:
	; Reset pixels of 5th sprite
	ldx PM5AOU+0	; Address of 5th sprite
	stx $80
	ldx PM5AOU+1
	stx $81	
	ldy #13			; Sprite length
	lda #$00		; Reset value
strloop0:	
	sta ($80),y		
	dey				
	bne strloop0	; Loop through till y is 0
	
	; Should we increment sprite index? (depends on GFX mode toggle)
	ldx PM5IND
	lda GFXTOG
	beq sprbranch2
	
	; Increment 5th sprite index (reset when index == MAX)
	inx
	cpx PM5MAX
	bcc sprbranch1
	ldx #0
sprbranch1:
	stx PM5IND
	
sprbranch2:
	; Set x pos. of new 5th sprite
	lda PMGX,x  ; Xpos of sprite to A
	sta M4POS
	cpx #0
	adc #1
	sta M3POS
	adc #2
	sta M2POS
	adc #2
	sta M1POS
	
	; Offset of IN address (frame of 5th sprite)
	cpx #0
	beq off0
	cpx #1
	beq off1
	cpx #2
	beq off2
off3:
	mva PMGF+7 PM5AIN+1
	mva PMGF+6 PM5AIN+0
	jmp add0
off2:	
	mva PMGF+5 PM5AIN+1
	mva PMGF+4 PM5AIN+0
	jmp add0
off1:	
	mva PMGF+3 PM5AIN+1
	mva PMGF+2 PM5AIN+0
	jmp add0
off0:	
	mva PMGF+1 PM5AIN+1
	mva PMGF+0 PM5AIN+0
		
	; Add base of IN address ($98A0)
add0:
	lda #$a0
	clc
	adc PM5AIN
	sta PM5AIN
	lda #$98
	adc PM5AIN+1
	sta PM5AIN+1
	
	; Offset of OUT address (ypos of 5th sprite)
	lda PMGY,x   ; Ypos of sprite to A
	sta PM5AOU
	lda #0 
	sta PM5AOU+1

	; Add base of OUT address ($9b00)
	lda #$00
	clc
	adc PM5AOU
	sta PM5AOU
	lda #$9b
	adc PM5AOU+1
	sta PM5AOU+1

	; Set Address for IN
	ldx PM5AIN+0
	stx $0
	ldx PM5AIN+1
	stx $1

	; Set Address for OUT
	ldx PM5AOU+0
	stx $2
	ldx PM5AOU+1
	stx $3
		
	; Set pixels of 5th sprite
	ldy #12	 ; Sprite length
sprloop1:	
	; Transfer values IN/OUT
	lda ($0),y	
	sta ($2),y	
	dey
	bne sprloop1	; Loop through till y is 0 
	
return:	
	; All done!
	rts
