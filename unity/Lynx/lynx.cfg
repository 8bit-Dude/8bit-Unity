SYMBOLS {
	__BLOCKSIZE__: 		  type = export, value = 1024;
    __STACKSIZE__:        type = weak, value = $0400; # 1k stack
    __STARTOFDIRECTORY__: type = weak, value = $00CB; # start just after loader
    __BANK0BLOCKSIZE__:   type = weak, value = $0400; # bank 0 cart block size
    __BANK1BLOCKSIZE__:   type = weak, value = $0000; # bank 1 block size
	__BMPSIZE__:		  type = weak, value = $20AD; # size of uncompressed bitmap (8365 bytes)
	__MUSSIZE__:		  type = weak, value = $0C00; # size of music track  (3072 bytes)
	__SHRSIZE__:		  type = weak, value = $0400; # size of shared/shunk file (1536 bytes)
	__MAINSIZE__:         type = weak, value = $BE38 - __STACKSIZE__ - __BMPSIZE__ - __MUSSIZE__ - __SHRSIZE__; # size available for game code ($8D8B)
    __EXEHDR__:           type = import;
    __BOOTLDR__:          type = import;
}
MEMORY {
    ZP:     file = "", define = yes, start = $0000, size = $0100;
    HEADER: file = %O,               start = $0000, size = $0040;
    BOOT:   file = %O,               start = $0200, size = __STARTOFDIRECTORY__;
    DIR:    file = %O,               start = $0000, size = 1*8;
    MAIN:   file = %O, define = yes, start = $0200, size = __MAINSIZE__;
}
SEGMENTS {
    ZEROPAGE:  load = ZP,     type = zp;
    EXTZP:     load = ZP,     type = zp,                optional = yes;
    APPZP:     load = ZP,     type = zp,                optional = yes;
    EXEHDR:    load = HEADER, type = ro;
    BOOTLDR:   load = BOOT,   type = ro;
    DIRECTORY: load = DIR,    type = ro;
    STARTUP:   load = MAIN,   type = ro,  define = yes;
    LOWCODE:   load = MAIN,   type = ro,  define = yes, optional = yes;
    ONCE:      load = MAIN,   type = ro,  define = yes, optional = yes;
    CODE:      load = MAIN,   type = ro,  define = yes;
    RODATA:    load = MAIN,   type = ro,  define = yes;
    DATA:      load = MAIN,   type = rw,  define = yes;
    BSS:       load = MAIN,   type = bss, define = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
