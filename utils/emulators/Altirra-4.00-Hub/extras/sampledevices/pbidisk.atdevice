// Basic 810-compatible disk drive emulation. Place additions.atr or
// another single-density disk image next to this file.

option "name": "Sample PBI disk device";

int bank_lo;
int bank_hi;

Segment disk: {
    source: "additions.atr",
    source_offset: 16,
    size: 92160
};

Segment status: {
    size: 4,
    init_pattern: [ 0, 0, 224, 0 ]
};

Segment firmware: {
    size: 2048,
    source: "pbidisk.bin"
};

Segment flash: {
    size: 131072,
    init_pattern: 255,
    persistence: "nonvolatile"
};

PBIDevice pbi_device: {
    device_id: $01
};

MemoryLayer firmware_layer: {
    name: "PBI disk firmware",
    address: $D800,
    size: $0800,
    segment: {
        source: flash,
        offset: $1F800,
        mode: "ro"
    },
    auto_pbi: true
};

MemoryLayer bank_read_layer : {
    name: "PBI bank read window",
    address: $D600,
    size: $0100,
    segment: {
        source: flash,
        offset: 0,
        mode: "r"
    },
    auto_pbi: true
};

MemoryLayer bank_write_layer : {
    name: "PBI bank write window",
    address: $D600,
    size: $0100,
    control: [
        {
            address: $D600,
            mode: "w",
            script: function {
                bank_lo = $value;
                bank_read_layer.set_offset((bank_lo << 8) + (bank_hi << 16));
            }
        },
        {
            address: $D601,
            mode: "w",
            script: function {
                bank_hi = $value & 1;
                bank_read_layer.set_offset((bank_lo << 8) + (bank_hi << 16));
            }
        },
        {
            address: $D602,
            size: 254,
            mode: "w",
            copy_from: $D600
        }
    ],
    auto_pbi: true
};

event "init": function {
    flash.copy(0, disk, 0, 92160);
    flash.copy($1F800, firmware, 0, $0800);
};

event "cold_reset": function {
    bank_lo = $FF;
    bank_hi = $01;
    bank_read_layer.set_offset($1FF00);
};
